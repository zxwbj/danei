闵卫
minwei@tarena.com.cn
如何存储数据？数据结构
如何处理数据？算法
程序设计=数据结构+算法
一、数据结构的基本概念
1.数据结构是相互之间存在一种或多种特定关系的数据的集合。
2.数据结构时计算机存储、组织数据的方式。
3.数据结构的选择直接影响计算机程序的运行效率(时间复杂度)和存储效率(空间复杂度)。
4.数据结构的三个层次
1)抽象层――逻辑结构
2)结构层――物理结构
3)实现层――运算结构
二、逻辑结构
1.集合结构(集)
结构中的数据元素除了同属于一个集合外没有其它关系。
2.线性结构(表)
结构中的数据元素具有一对一的前后关系。
3.树型结构(树)
结构中的数据元素具有一对多的父子关系。
4.网状结构(图)
结构中的数据元素具有多对多的交叉映射关系。
三、物理结构
1.顺序结构
结构中的数据元素存放在一段连续的地址空间中。
随机访问方便：a[10]，a[5]
                        *(a+10)，*(a+5)
                        常数级时间复杂度O(1)
空间利用率低
int* p = (int*)malloc (1000 * sizeof (int));
插入删除不便：线性级时间复杂度O(N)
2.链式结构
结构中的数据元素存放在彼此独立的地址空间中，
每个独立的地址空间称为节点，
节点处理保存数据外，还需要保存相关节点的地址。
空间利用率高
插入删除方便：O(1)
随机访问不便：O(N)
四、逻辑结构和物理结构的关系
               表              树          图
顺序  顺序表(数组) 顺序树 链表数组
链式  链式表(链表) 链式树
每一种逻辑结构究竟选择哪种物理结构实现，主要取决于：
时间复杂度；
空间复杂度；
实现难度。
五、运算结构
1.创建与销毁：分配资源、建立结构、释放资源。
2.插入与删除：增加、减少结构中的元素。
3.获取与修改：遍历、迭代、随机访问。
4.排序与查找：算法的应用。
六、数组
1.一维数组：下标<->元素
23 12 45 23 12 55 9 17 +
9 12 12 17 23 23 45 55
2.二维数组：
int m[2][3] = {1,2,3,4,5,6}; 
1 2 3
4 5 6
1 2 3 4 5 6 - 行级 - C语言只有行级
1 4 2 5 3 6 - 列级
m[i][j] <-> *(*(m+i)+j)
i - 行标
j - 列标
m[1][1]
*(*(m+1)+1)
七、结构体
typedef struct 结构体类型名 {
  类型1 成员名1;
  类型2 成员名2;
  ...
} 结构体类型别名;
struct 结构体类型名 变量名 = {初始化表};
结构体类型别名 变量名 = {初始化表};
typedef struct Date {
  int year;
  int mon;
  int day;
} DATE;
typedef struct Student {
  char name[256];
  int age;
  DATE bday;
} STUDENT;
struct Student sa = {"张飞", 22, {1980, 1, 1}};
STUDENT sc = {"赵云", 20, {1982, 1, 1}};
printf ("%s %d\n", sa.name, sa.age);
.    - 直接成员访问运算符
-> - 简介成员访问运算符
STUDENT* ps = &sc;
printf ("%s %d\n", ps->name, ps->age);
printf ("%s %d\n", (*ps).name, (*ps).age);
struct C {
  int x;
  int y;
};
struct B {
  struct C* c;
};
struct A {
  struct B* b;
};
struct C c = {100, 200};
struct B b = {&c};
struct A a = {&b};
struct A* p = &a;
printf ("%d %d\n",
  p->b->c->x, (*(*(*p).b).c).y);
printf ("%d %d\n", a.b->c->x, a.b->c->y);
八、堆栈
1.后进先出
1234 = 1*10^3+2*10^2+3*10^1+4*10^0
%10 -> 4
/=10 -> 123
%10 -> 3
/= 10 -> 12
%10 -> 2
/= 10 -> 1
%10 -> 1
/= 10 -> 0 !!!
X进制的ABCD = A*X^3+B*X^2+C*X^1+D*X^0
练习：利用堆栈实现任意进制的打印程序。
stdbool.h中：
typedef int bool;
#define 1 true;
#define 0 false;
bool b = true; // int b = 1;
sys/types.h中：
typedef unsigned int size_t; // 32
typedef unsigned long long size_t; // 64
size_t n = strlen (str);
int* p = (int*)malloc (sizeof (int));
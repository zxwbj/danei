回顾：
  Unix的内存管理 - 6个相关函数  进程内存空间的6个组成部分  Unix虚拟内存地址的机制  
  字符串String 的基本操作 - 
 string.c 
今天：
   6个函数
   malloc() 和 free()
    malloc() 可以分配内存，包括：
    1  分配虚拟内存地址 (按字节分配)
    2 把 分配的虚拟内存地址映射到物理内存/硬盘文件上
      (按内存页映射)
  所谓分配内存地址就是把 虚拟内存地址交给某个变量，也是从未使用 变成 已使用。
  malloc()一定会 分配虚拟内存地址，但不一定做内存映射
  int* p1 = malloc(4);
  int* p2 = malloc(4);
 
  malloc()是C程序员分配内存最常用的方式，在Unix系统中，申请小块内存时，一次映射33个内存页；而在申请大块内存时，会分配比申请的多一点。
  malloc()函数除了分配申请的内存空间之外，还需要额外占用一些空间存储附加信息，malloc()底层额外维护了一个双向链表，存储附加信息。
 void* p1 = malloc(4/8/16/...); //p1 首地址
 ...
 free(p1);//free()只有释放的首地址，请问释放到哪里结束
 附加信息 记录了 长度等相关信息。
 malloc()分配的地址不是连续的，因为要存储附加信息，这个附加信息有时候需要留空。
 free() 一定会释放虚拟内存地址，但不一定解除内存的映射，并且最后33个内存页不会解除映射，直到进程结束才解除。
 总结：
   malloc()和free()在使用时无需考虑太多，malloc()一定不能越界，free()有可能清理内存，也可能不清理。

 sbrk()和brk()
  sbrk()、brk()同时具备分配和回收内存的能力。sbrk()分配内存时更好用，brk()回收内存更好用。sbrk()和brk()是Unix的系统函数，必须在Unix/Linux系统下才能使用。
  sbrk()和brk()的底层由Unix系统维护了一个位置，通过位置的移动 分配或回收内存。 
  void* sbrk(int increment)
   参数increment就是增量，是分配、回收内存的字节数
     当 大于0时，向后移动increment字节，分配内存
     当 小于0时，向前移动increment字节，回收内存
     当 等于0时，不移动，只是返回当前的位置(取当前位置)
  返回值，对于大于0和等于0，返回之前的位置，有价值； 
     对于小于0，返回之前的位置，没有意义的返回。

  brk(void*) 把位置直接移动到 参数指定的位置，而不用考虑之前的位置如何。 

  sbrk()在分配内存时便捷，而brk()在回收内存时比较吧便捷；因此在使用时，应该 sbrk()负责分配，brk()负责回收。
  练习：
  
  写一个代码，实现如下功能：
     用sbrk()和brk()分配一个int，一个double，一个字符串的内存，并且最后分别回收。
   要求代码最简洁。

mmap()和munmap() - 用户层的最高权限函数
 void* mmap(void* addr,size_t size,int prot,int flags,
  int fd,offset_t offset)
  参数：
    addr是 映射的开始地址，一般给0即可，0 就是内核选择
    size就是映射的大小，不足一页的会映射满一页
    prot就是映射的权限，一般写成：(读写权限)
      PROT_READ|PROT_WRITE  
    flags是映射时的标识，主要包括：
     MAP_PRIVATE/MAP_SHARED
       MAP_SHARED只对映射文件有效，就是允许其他进程从文件中读写数据。
       MAP_PRIVATE 都可以使用，不允许其他进程操作。
     MAP_ANONYMOUS 特指映射物理内存，系统默认映射文件。

    fd 文件描述符，映射文件有用，映射物理内存给0即可。
    offset是映射文件时的文件偏移量，映射内存给0即可。
  返回，成功返回分配内存的首地址，失败返回 MAP_FAILED(-1) 

  位或运算符 - 位运算符
   权限运算：
    chmod 777 a.txt
    RWX
    100 - 读权限
    010 - 写权限
    001 - 执行权限
    位或的特点：与0位或 不变，与1位或 一定为1.
   位或运算:  读+写 -> 100 | 010 = 110 -> 
  很多权限或选项 都可以用位或连接，位或连接的前提条件是每个权限或选项 必须是 二进制位中，只能有一个1的，其他必须是0(2的n次方)。

  位与运算 
    特点：与0 位与结果一定为0，与1 位与结果不变。
   位与运算通常 用来判断 某些位的值，比如，取一个二进制数的后3位：
     1011 0010
  &0000 0111   -> & 7
----------------
     0000 0010 -> 取后3位
  取后8位： & 0xFF
   
  系统调用(System call)
   内存分为用户空间和内核空间，用户空间不能直接访问内核空间。但系统提供了一些系统函数，可以从用户空间进入内核空间，这些系统函数 统称为 系统调用。用户空间的程序必须通过系统调用进入内核空间，完成对应的功能。以后Uc会有很多的系统函数(系统调用)。
   
  exit(); 函数用于退出进程 ，里面 -1 通常代表非正常退出，正常 退出 一般 用 非负数。
  exit()是 退出进程的，return 是 退出函数的。
    




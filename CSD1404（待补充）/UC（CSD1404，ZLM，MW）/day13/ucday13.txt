今天：
  信号量集
  网络 - 网络常识、网络编程、TCP编程、UDP编程
  信号量集 - semaphore arrays(信号量数组)
   信号量集就是信号量的数组。信号量是一个计数器，用于控制访问共享资源的最大 并行进程总数。信号量采用的是递减的计数方式，就是开始设置最大值为初始值，然后每上来一个进程，计数减1，每退出一个进程，计数加1，计数到0阻塞对共享资源的访问，访问的进程会被阻塞(也可以设置为非阻塞)，直到有进程退出，计数大于0后解除阻塞。信号量集就是计数器的数组，可以控制多个共享资源的访问 问题。
   信号量集的使用步骤：
    1 使用ftok()得到一个外部的key。
    2 使用semget() 创建/获取一个 信号量集。
    3 如果是新建的信号量集，需要初始化最大值。使用函数semctl(SETVAL)。
    4 使用函数 semop() 进行减1(进入)、加1(退出)的操作
     5 如果确保不再使用，使用semctl(IPC_RMID)删除。

  函数：
     int semget(key_t key,int length,int flag)
     参数key就是外部的key，length就是数组的长度(信号量集中信号量的个数)，flag如果是新建用：IPC_CREAT|0666，获取用 0 即可。
    semctl(int semid,int index,int cmd,...)
     参数 semid就是信号量集的内部ID，index就是元素的下标(有些时候不需要)，cmd设置做什么操作，初始值用SETVAL，删除用IPC_RMID，如果设置初始值，第四个参数就是初始值。
    返回 会根据cmd 的不同，返回不同的结果。

  int semop(int semid, struct sembuf semoparray[]
    ,size_t nops);
     参数semoparray是一个指针，它指向一个信号量操作数组，信号量操作由sembuf结构表示：
  struct sembuf{
    unsigned short sem_num;//操作信号量的下标
    short sem_op; //对信号量操作方式。-1减1, 1加1
    short sem_flg; //默认0，也可以用IPC_NOWAIT
  };
    nops就是数组的长度。

   killall 进程名a  
    可以杀掉所有名称叫a的进程
  
   网络编程 - 网络常识
     Unix/Linux在网络编程方面功能非常强大，提供了很成熟的技术模型和编程步骤。按照固定的套路编程即可。
   OSI 七层模型：
     物理层、数据链路层、网络层、传输层、会话层、表现层、应用层。
    协议和协议簇(族) - 网络的数据交互需要制定一些交互的规范，就是协议。
    协议簇是相关的一系列协议，一般以主体协议命名，比如：TCP/IP 协议就是一个协议簇，主体协议就是TCP协议和IP协议。
    常见协议：
      HTTP - 超文本传输协议，互联网基础协议
      FTP - 文件传输协议，包括文件的上传和下载
      TCP - 传输控制协议，一般不翻译
      UDP - 用户数据报协议
      IP协议
      email的发送和接收协议：smtp和pop3
  重点：
    IP地址和端口(port)
    在网络中，计算机也是用整数代表，这个整数叫IP地址。计算机在网络中的地址(唯一标识)就是IP地址。IP地址分为IPV4 和 IPV6，IPV4是 32位 整数，IPV6是 128位整数。
目前IP地址的主流还是IPV4，但主流的操作系统已经开始支持IPV6了(两个都可以)。IPV4 理论上的最大值就是4G(40多亿)。
     课程针对IPV4。IP地址就是一个 32位的整数。IP地址有两种表示方式：
     8位十六进制的整数 和 点分十进制。
    点分十进制的IP地址就是每个字节(8位二进制)看成一个十进制的整数(0-255)，中间用 . 分开，点分十进制给人看的，计算机底层存的是 32位二进制整数(8位十六进制)。
     比如： 192.168.100.20 (点分十进制)转成十六进制？
     一个字节换成2位十六进制，拼起来即可。
       0x C0 A8 64 14 -> 0xC0A86414
   IP地址分为A B C D 四类。
   IP地址虽然点分十进制已经比较好记了，但是服务器比较多时还是分不清。因此网站都是用 域名(网址) 代表服务器。网址通过域名服务器可以转换成IP地址。
   子网掩码 : 用于区分是否在同一网段。
     IP地址：166.111.160.1与166.111.161.45	     子网掩码：255.255.254.0
    判断是否同一网段。 做位与运算看结果，结果一样就是
   166.111.160.1
   255.255.254.0
  -----------------
   166.111.160.0

   166.111.161.45
   255.255.254.0
  -----------------
   166.111.160.0

   网络的常见命令：
     查看IP地址： Unix : ifconfig
                         Windows: ipconfig
    查看网络是否畅通： ping IP地址

  网络的物理地址 就是网卡的地址，网卡在出厂时都会设定一个不重复的物理地址，这个物理地址绑定IP地址，从而通过IP地址找到网卡，定位计算机。

  IP地址只能定位计算机，而无法确定计算机中的哪个进程。进程在计算机内部用PID代表，在网络中 用 端口代表一个进程。端口就是一个 unsigned short ，范围是：
  0-65535。
  操作系统中，0-1023的端口预先被占用，因此不用。比如: 
   80端口 - http端口
   21端口 - ftp端口
   23端口 - telnet端口 (所有的端口都可以改，有配置文件)
  
  1024 - 48XXX 稳定的端口，可以使用，也不一定都能用。
有些软件会占用部分端口(极少数端口)，比如：oracle数据库占 1521端口，8080端口。
  48XXX 以后的端口不是十分的稳定，系统随时可能用，因此不要使用。
   
   在计算机中，整数的存储方式有两种：
    从高字节到低字节的存储和从低到高的存储。比如：
     整数： 0X1234 ，有些机器是1 2 3 4 的次序；而有些机器是 4 3 2 1 . 因此网络中的数据有可能顺序不同。
   解决方案就是把本机格式转成网络格式进行传输，接收数据时把网络格式转成本机格式。
   本机格式是可能不同的，而网络格式是固定的。


  网络编程 - 有固定的套路，因此学会怎么写程序
   网络编程(socket编程)
    socket - 套接字，一般情况下对应网络编程
   C程序员的网络编程：(有较好的通用性)
   网络编程至少要写两个程序 - 服务器端和客户端
   因此在编程时，需要考虑两端的事情。
   网络编程的模型：
   一对一(一个server 一个client) 和 
   一对多(一个server 多个 client)
   socket编程分为 本地通信(IPC)和网络通信，但编程步骤没有太大的区别。
   一对一的网络的编程步骤：
   1 服务器端的步骤：
     1.1 调用 socket()函数，返回 socket描述符(类似文件描述符)。
     int socket(int domain,int type,int protocol)
    参数： domain 域，用于选择 协议簇(族) ，包括：
      AF_LOCAL/AF_UNIX/AF_FILE  -  本地通信
      AF_INET  -  网络通信(IPV4)
      AF_INET6  -  网络通信(IPV6)
      注：AF 换成 PF 也可以
      type  用于选择通信类型，主要是：
       SOCK_STREAM ： 数据流，基于TCP协议
       SOCK_DGRAM  ： 数据报，基于UDP协议
     protocol 本来是用于指定协议的，但目前没用，因为协议已经被前2个参数指定了，给 0 即可。
    返回： 成功返回socket描述符；失败返回-1.
    1.2 准备通信地址。
     通信地址由 3个 结构体组成，struct sockaddr 、 sockaddr_un、sockaddr_in。

    其中  sockaddr 用于 做函数的参数，本身不存储数据。本地通信的数据存在struct sockaddr_un中，网络通信的数据存在struct sockaddr_in中。
    struct sockaddr 的成员没有意义。
    #include <sys/un.h>
    struct sockaddr_un{
         sun_family; //协议簇，与socket()中的domain一致
         sun_path; //socket文件名(IPC媒介是socket文件)
     };
    #include <netinet/in.h>
    struct sockaddr_in{
         sin_family; //协议簇，与socket()中的domain一致
         sin_port; //端口号
         sin_addr; // IP地址的结构，里面有s_addr成员
    };
    注：编程 基本就 记 sockaddr_in.
    1.3 绑定描述符和通信地址，函数bind().
     int bind(int sockfd,struct sockaddr* addr,
      socklen_t len)
     参数： sockfd就是socket描述符，addr就是通信地址的指针(需要做类型转换)，len就是sizeof(通信地址)
     成功返回0，失败返回 -1 。
    1.4 使用 read() write() 读写 socket描述符，实现数据的读写交互。
    1.5 使用close() 关闭描述符。
   2 客户端的编程步骤：
    与服务器端基本一样，唯一的区别就是 bind() 换成 connect().
   注： 服务器和客户端的读写要匹配，如果服务器读，客户端应该是写，反之亦然。
   网络编程时，IP地址需要使用转换函数inet_addr()，端口需要本机格式转网络格式 htons()





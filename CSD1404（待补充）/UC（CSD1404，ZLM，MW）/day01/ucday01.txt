Unix系统下C的开发 (15天)
 Unix系统的系统函数 + Unix系统的原理
 课程内容：
  Unix系统/Linux系统介绍
  Unix/Linux的静态库和共享库的使用
  C程序员的错误处理
  Unix的内存管理
  Unix的文件处理
  Unix的目录相关函数
  Unix的进程管理
  Unix的信号
  IPC - 进程间通信
  网络Socket编程
  Unix的多线程编程
 代码案例： 2天 day11和day15 - 老师留案例要求，大家做
 将来的就业方式：
   C++ 就业
   标C + UC 就业 
   MFC(Windows系统框架开发 VC++) 就业
   Arm 编程 就业

张立猛 - zhanglm@tarena.com.cn
 C++方向的教学总监 - 所有教学相关的都可以找我
 我的感悟：
   1 付出多的 总是 收获也是最多的。
   2 学无止境
   3 要能抓住机会(有准备的,职场: 学历211硕士、口语)
学习方法：
 以前都是 应试学习 - 题海战术 (必须发扬)
 在达内、职场的学习  技能学习 - 是以实战性为主
  能编出什么样的程序 - 是最终的
  提升编码的要求： 
   1 基础好的同学要求写出 有质量的代码
   2 基础不好的同学要求写出 规范的代码
 需要注意的点：
  1 保证学习时间，包括课上和课下 (6+3) 
  2 多动手，不要 总是先弄懂再动手，能用 就可以出手
  3 有问题一定要问，解决问题的过程其实也是能力的体现
 
技术：
  标准(规范) - 行业的规范，所有行业中的公司都必须遵守
  产品 - 产品是软件，这种软件以质量为第一，不受单独用户的影响。
  项目 - 项目是软件，这种软件都是针对特定客户的，因此受特定用户的影响。

  Linux借助GNU项目提供了界面，借助POSIX规范实现和Unix系统之间的兼容性，借助GPL解决了版权问题，因此得到了飞速的发展。

 编译器GCC - gcc 是编译器的集合，可以编译多种语言。
   gcc -E ： 只做预处理，不做编译和连接
   gcc -S  :  生成汇编文件 (.s文件)
   gcc -c  :  只编译，不连接，生成 .o 文件
   gcc -o :   修改目标文件名(只要生成的文件都可以改)
   gcc     :    预处理、编译和连接都做，生成 可执行文件
   gcc -Wall : 可以显示更多的警告信息

  gcc 一个.c文件时，有4个阶段： 预处理、编译、汇编、连接。
   预处理 - 处理的C程序中的指令(以#开头的)，换成纯C语法
   编译 - 整体检查一下程序的错误，语法之类的
   汇编 - 把高级语言转成汇编指令
   连接 - 把所有的机器指令进行连接。

  编译有广义和狭义之分，4个阶段中的编译就是一个狭义的，我们通常说的编译是广义的编译，包括：预处理、编译和汇编的，最终生成一个 .o文件。

   程序员写的程序 - 高级语言 - 转成汇编指令 - 转成机器语言(指令) - 计算机识别并且运行。

  指令 是 以#开头的，本身不属于纯C语法。
   指令会在预处理时 转换成 纯C语法。
   常见的指令包括：
    1 #include  主要用于包含头文件(.h)
    2 #define 定义宏，包括宏变量和宏函数
    3 条件编译 #if  #elif  #else  #endif  #ifdef  #ifndef
   除此之外，还有一些特殊的用法：
   #warning  -  产生一个警告(没有其他的作用)
   #error  -  产生一个错误(编译到此为止，失败)
   #pragma - 可以额外提供一些功能，有些很有意思

  #pragma GCC dependency 文件名a
  比较当前文件和指定文件a之间的时间关系，如果a比当前文件新，就产生一个警告
  #pragma GCC poison 名字
  把后面的名声定义为毒药，也就是禁止使用，否则产生错误

  #pragma pack(n) 设置结构的对齐和补齐方式，如果n小于4，就按n的倍数对齐和补齐，否则 按以前的倍数对齐。
   对齐就是每个元素都应该放在自己大小的整数倍上(大于4按4算)，补齐就是 整个结构的大小应该是 最大的成员大小的整数倍(大于4的按4算)。
   struct s{
      char c1;
      int i;
      char c2;
   };  
   sizeof(struct s) = 12  -> 好处是寻址快，缺点浪费空间

   #pragma pack(1) - 不做对齐和补齐
   #pragma pack(2) - 按2的倍数对齐和补齐  

  头文件和环境变量
   C程序员写代码时，有 头文件和源文件，各种声明都放入头文件，各种实现都在 源文件。比如：变量的声明、宏的定义、结构的定义、函数的原型都在 头文件中，源文件中有变量的赋值、函数的编码实现。
   查找自定义头文件的几种方法：
   1 放 ""中，不在同一目录下可以用相对路径定位
   2 可以在gcc 编译时，用 gcc -I所在目录 定位
   3 使用环境变量CPATH或C_INCLUDE_PATH

  环境变量 是系统在启动的过程中，需要把很多东西加载到内存中，有一些常用的数据存入了环境变量。环境变量 在Windows和Unix/Linux中都是存在的。环境变量有很多，比较常见的：
   PATH - 系统路径，系统默认情况下可执行文件必须带路径才能运行，但如果把目录加入到PATH中，可以省略路径。
   CPATH - C语言中，头文件所在的路径
   LIBRARY_PATH - 系统库文件所在的路径
   LD_LIBRARY_PATH - 系统在运行时，定位共享库的路径
   JAVA_HOME - Java程序员用的
   CPLUS_INCLUDE_PATH - C++定位头文件的
   ....
  windows系统配置环境变量：
   右键点击我的电脑 -> 属性 -> 高级 -> 环境变量
  Unix/Linux系统配置环境变量：
   不同的shell配置方法不同，操作系统是由内核和shell组成，shell就是 内核和用户的桥梁。通过shell可以操作内核。
   Unix的常见shell包括： sh / csh / bash (sh的增强版)
  讲一下bash下的配置：
    export  环境变量的名字=环境变量的值
   如果把配置的命令写入启动文件，系统启动就可以生效。
   bash下有好几个启动文件，比如：
    .bash_profile 和 .bashrc (配置这个) 在登录目录下 
    配置方式：
    先 cd 进入登录目录
    vi .bashrc
    按G进入最后一行
    在最后一行的下一行 加上 export PATH=$PATH:.
    然后保存退出。(重启才生效)
    source .bashrc 就生效 

   进入day01目录后，用 a.out 运行程序即可。

  telnet IP地址 可以远程登录 远端的服务器。
  echo 可以在屏幕上打印东西 ，打印环境变量 
   echo $环境变量名     就可以打印值

  汇总一下C语言和数据结构算法
   1 C语言基本语法(变量、类型、标识符、流程控制)
   2 数组(当数组用，玩下标；当指针用，玩指针)
   3 指针(指针是 存储地址的变量，指针的运算)
   4 字符串(字符串当指针用，字符串的函数)
    strcpy() strcmp() strcat() strlen() 
    memcpy() memset()
   5 结构和联合
   6 C的函数库
    stdio.h  stdlib.h  string.h 
    printf() scanf()家族
    srand() rand() time()
    fopen() fwrite() fread() fclose() fseek()
    strcpy() strcmp() strcat() strlen() 
    memcpy() memset()
    malloc() free()
   数据结构和算法
    逻辑结构 - 集合、线性结构、树型结构、网状结构
    物理结构 - 基于和数组和链表的实现
    运算结构 - 提供哪些函数
   需要掌握的常见数据结构：
     堆栈、队列、链表、有序二叉树
   算法： 排序算法和查找算法
    冒泡、选择、插入、快速  (归并)
    查找算法：有序用二分，无序用线性。


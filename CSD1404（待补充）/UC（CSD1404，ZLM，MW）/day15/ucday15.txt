回顾：
  网络编程
   TCP模型
    SERVER:
     1 socket(AF_INET,SOCK_STREAM,0)
     2 struct sockaddr_in addr; 
     3 bind(sockfd,(struct sockaddr*)&addr,sizeof(addr))
     4 listen(sockfd,number);
     5 while(1) accept(sockfd,*,*);
     6 read()/write();
     7 close();
    CLIENT:
    1 socket();
    2 struct sockaddr_in addr;
    3 connect();
    4 read()/write();
    5 close();
   UDP模型
    1 socket(AF_INET,SOCK_DGRAM,0);
    2 struct sockaddr_in addr;
    3 bind(); //发送方无需bind
    4 sendto() / recvfrom() / read()
    5 close();
  注：接收数据时，如果需要接收 发送方的通信地址，用recvfrom()；如果只接收数据，不需要通信地址，可以用read()。
   UC的最后一个部分： 多线程编程
    多进程可以解决网络开发中的代码并行，同时支持多个客户端。但多进程对资源的消耗比较大，因为每个进程都需要独立的内存空间。
    多线程是轻量级的代码并行的解决方案，不需要太多的额外资源消耗。线程可以共享所在进程的内存资源，只需要额外的一个线程栈就可以了。因此，多线程是网络中应用最广的代码并行的解决方案。
   进程和线程的关系：
    主流的操作系统支持多进程，每个进程的内部支持多线程
   进程内部可以有多个 线程，但至少要有一个主线程(main()函数)，程序从主线程开始运行。
    多线程之间相互独立，又相互影响。
    多线程之间的代码执行次序： 每个线程内部代码顺序执行，但多线程之间的代码乱序执行(不确定)。
    主线程一旦结束，进程会随之结束，所有线程都结束。
  多线程并行的实现的机制：
    代码的运行必须有CPU和内存，内存可分，CPU不可分，真正意义的代码并行是不存在的。人的感官是有时间的，比如视觉，假设视觉的时间需要0.1秒=100毫秒。主流的操作系统都使用CPU时间片技术来实现代码并行。假设现在有4个线程a、b、c、d，把CPU的运行时间(100毫秒)分成极小的CPU时间片，比如一毫秒一个，有100个CPU时间片。先分给每个线程1个CPU时间片，然后4个线程抢占CPU，4毫秒之后，每个线程都运行了1毫秒；100毫秒以后，每个线程都运行了25毫秒。当我们看到这个程序时，每个线程都运行了25毫秒，因此我们会认为4个线程并行执行的。其实，所谓的并行是针对时间段的，针对时间点的并行是不存在的。
  多线程能提升代码的效率。
  Unix系统对于多线程提供了一套相关的函数和结构，提供了一个头文件和一个共享库文件。头文件是 pthread.h，库文件是 libpthread.so。编译连接线程的程序时，需要加上-pthread。
  线程相关的函数和结构都以 pthread_  开头，比如创建线程用 pthread_create()。返回值一般都是比较特殊，错误码直接返回，而不是返回-1，errno在线程中没有被使用。


  线程的相关函数：
    创建新线程用 pthread_create();     
   int pthread_create(pthread_t* id,pthread_attr_t* 
    attr,void* (*fa)(void*),void* arg)
   参数：4针函数，4个参数都是指针。id是传出参数，用于存储线程ID；attr是属性指针，给0即可；fa是函数指针，线程启动后将执行fa中的代码，arg是传给fa的参数。
   返回：成功返回0，失败返回错误码。
   没有errno，因此perror()没用，得用strerror()得到错误信息。
   注：连接线程的代码时，需要加 -pthread.
  
   pthread_join() 可以让一个线程等待另外一个线程的结束，比如：在线程a中调用了pthread_join(b,0); 线程a会等待线程b的结束，线程a处于阻塞状态，直到线程b结束才继续运行。
  关于线程的返回值
    线程的返回值遵循的函数返回值的要求。
    关于函数的返回值：
     1 可以返回局部变量。
     2 不能返回指向局部变量的地址。
     3 static的局部变量地址 可以返回。
     4 返回类型不能写成数组，但可以写成指针。    
    线程只有结束了才有返回值，因此，pthread_join()可以获得等待线程的返回值。第二个参数是一个二级指针，可以传出线程的返回值。

  线程的结束有正常结束和非正常结束：
   正常结束包括： 在线程的函数中执行了return或者调用
    pthread_exit(void* 返回值)
   非正常结束就是被其他线程终止。

  exit()退出的是进程，pthread_exit()退出的是线程。

  线程的状态：
    线程应该处于分离状态或者非分离的状态：
     处于分离状态的线程 资源回收是在线程以结束就立即回收，无需等待其他线程。
     处于pthread_join()中等待的线程，资源在pthread_join()返回之后回收线程的资源。
     非分离状态的线程，如果不join()，资源回收不是 十分的确定。
   因此：一个线程最好处于分离状态或者被join()。
    函数pthtread_detach(id)可以把线程设置为分离状态，处于分离状态的线程调用 pthread_join( )没有效果。

  线程可以被其他线程取消，函数 pthread_cancel().
   
  线程同步技术 - 多线程是共享的进程的资源，因此多线程在访问相同的资源时，就可以互相覆盖、互相影响。解决多线程之间 共享数据的冲突 的技术 就是 线程同步技术。在Unix系统中，线程同步技术主要有：
   互斥量(mutex)、信号量(semaphore)、条件变量
  互斥量是官方提供的线程同步技术，也包括在pthread.h中。核心思想就是 把共享资源的访问 由并行改为串行。互斥量可以保证 数据没问题，但 会降低代码的效率。
   互斥量(互斥锁)的使用步骤：
    1 声明互斥量  pthread_mutex_t  lock;
    2 初始化互斥量
      在声明的同时用宏 进行初始化 或 用函数
       pthread_mutex_init()初始化。
       pthread_mutex_t  lock = 
         PTHREAD_MUTEX_INITIALIZER;
        pthread_mutex_init(&lock,0);
    3 使用互斥量对代码进行加锁，只允许当前线程访问
      pthread_mutex_lock(&lock);
    4 访问共享资源
    5 解锁  pthread_mutex_unlock(&lock);
    6 回收互斥量的资源
         pthread_mutex_destroy(&lock);

   信号量 - semaphore
     信号量其实是一个计数器，用于控制访问共享资源的最大的并行线程总数。信号量不是线程官方的解决方案，是第三方的代码，使用头文件 semaphore.h，与IPC的信号量集是不同的代码。
    信号量如果计数为1，效果 等价于 互斥量。信号量有固定的套路：
     1 声明信号量  sem_t  sem;
     2 初始化信号量  sem_init();
     int sem_init(&sem, 0 , 计数的最大值)
     其中，第一个参数是 信号量的指针，第二个参数必须是0，代表 在线程间使用，第三个参数 就是计数器的初始值。
     3 计数减1  sem_wait();
     4 访问共享资源
     5 计数加1  sem_post();
     6 回收信号量的资源  sem_destroy();
  练习： 用信号量(计数设置为1) 实现刚才互斥量的代码。

   死锁：
    mutex_t  lock1，lock2;
    线程a: 
     mutex_lock(&lock1);
       ....
       mutex_lock(&lock2);
       .....
       mutex_unlock(&lock2);
     mutex_unlock(&lock1);
    线程b:
     mutex_lock(&lock2);
       ....
       mutex_lock(&lock1);
       .....
       mutex_unlock(&lock1);
     mutex_unlock(&lock2);
  线程a和线程b 互相锁定，出现了死锁。避免死锁，要
   顺序上锁，反向解锁，不要回头


自增操作符(++)可以把一个存储区里的
    内容加一
自减操作符(--)可以把一个存储区里的
    内容减一
它们都是单目操作符（它们都需要一个
    存储区配合使用）
把自增自减操作符写在存储区前边叫
    前操作，写在后边叫后操作
可以认为前操作的优先级很高，后操作
    的优先级很低
不要在一条语句中对同一个存储区多次
    进行自增或自减计算

布尔值包括真(true)和假(false)这两个
计算机里使用1表示真，0表示假
C语言中可以把任何一个整数当成布尔值
    使用，0做布尔值的时候代表假，其他
		所有整数做布尔值使用时代表真

逻辑表达式的计算结果只能是布尔值
逻辑表达式需要使用专门的操作符
    编写，这种操作符叫做逻辑操作符
双目逻辑操作符包括==(等于),!=(不等于)，
    >（大于），<（小于），>=(大于等于)
		和<=(小于等于)

单目逻辑操作符包括!（求反），这个操作符
    应该写在一个布尔值的前面，它的计算
		结果是原有布尔值的相反值

逻辑操作符的优先级比算术操作符的优先级
    低

以上逻辑操作符只能用来编写包含单个双目
    逻辑操作符的表达式

与(&&)和或(||)也是双目逻辑操作符，他们
    可以用来把两个布尔值合并形成一个
		逻辑表达式
当使用与(&&)连接两个布尔值时，只要其中
    一个布尔值的结果是假则合并后的逻辑
		表达式结果就是假。
当使用或(||)连接两个布尔值时，只要其中
    一个布尔值是真则合并后的逻辑表达式
		结果就是真

与(&&)和或(||)逻辑操作符具有短路特征（
    如果前一个布尔值可以决定整个表达式
		的结果则后一个布尔值根本不计算）

位操作符可以直接操作字节中的单个二进制
    数位
双目位操作符包括按位与(&), 按位或(|)和
    按位异或(^)
双目位操作符会先把两个数字转换成二进制
    补码，然后把补码中对应数位上的数字
		进行计算。

按位与(&)把两个补码中对应数位上的数字
    进行与计算
    1   &    0       0
		1   &    1       1
		0   &    0       0

   3       0000 0011
&  5       0000 0101
           0000 0001

按位与可以把一个二进制补码中某些数位
    清0
任何二进制数位和1做按位与结果不变
任何二进制数位和0做按位与结果是0

按位或（|）把两个二进制补码中对应
    数位上的数字进行或计算
    1   |    0         1
		1   |    1         1
		0   |    0         0

    3           0000 0011
|   5           0000 0101
                0000 0111

按位或可以把一个二进制补码中某些数位
    设置成1
任何二进制数位和0做按位或计算结果不变
任何二进制数位和1做按位或计算结果是1

按位异或(^)可以把两个二进制补码中对应
    数位上的数字进行异或计算
    1  ^  0        1
		0  ^  0        0
		1  ^  1        0

    3       0000 0011
^   5       0000 0101
            0000 0110

按位异或可以把一个二进制补码中某些
    数位求反
任何数位和0做按位异或结果不变
任何数位和1做按位异或结果相反

移位操作可以把一个字节中的所有数位
    相左或向右移动n位（n代表一个整数）
向左移动使用左移操作符(<<)表示
向右移动使用右移操作符(>>)表示
移位操作符都是双目操作符，前边的
    数字是要进行移位操作的数字，后面
		的数字是移动的位数
移位操作符不会修改任何存储区里的内容

左移操作在右边空出来的二进制位上
    统一补0

无符号数据右移后在左边空出来的位置
    上补0
有符号数据右移后在左边空出来的位置
    上补符号位

如果移位过程中没有丢失有效数据则左移
    n位相当于乘以2的n次方，右移n位
		相当于除以2的n次方

~也是一个位操作符，它可以把一个二进制
    补码中所有数位求反
它是一个单目位操作符

计算机中为每个字节分配一个地址，一个存储区
    是由多个相邻字节拼凑的，存储区的地址
		是其中最前边字节的地址（这个字节的
		地址最小）
&是取地址符号，可以用来获得一个存储区
    的地址
这个操作符是一个单目操作符，需要一个
    存储区配合使用
所有地址都是数字，打印地址数据时需要
    使用%p作为占位符
*操作符可以根据一个地址数据找到对应的
    存储区
它是一个单目操作符，需要和一个地址
    数据配合使用

三目表达式可以根据一个布尔值从两个表达式
    中挑选一个来计算
整个三目表达式的结果就是挑选出来的表达式
    的计算结果
三目表达式的格式如下
   布尔值 ? 表达式1 : 表达式2
如果布尔值为真则挑选表达式1，否则挑选
    表达式2

如果一个表达式中有多个不同类型的数据
    则计算机会先把他们转换成同一个类型
		的数据然后再计算，这个转换过程叫
		隐式类型转换
隐式类型转换由计算机自动完成
隐式类型转换中会把所有整数类型转换成
    int类型，把float类型转换成double
		类型。
如果不同类型的大小一样则把有符号类型
    转换成无符号类型，把int转换成
		float类型

C语言中可以随时给数字指定一个新类型，
    这叫强制类型转换
强制类型转换有可能造成有效数据的丢失

类型转换不会修改原有存储区中的内容，
    他们会根据原有存储区的内容做出
	  新数据，程序中实际使用的是这些
		新数据。

预习：
    1.流程控制语句(分支,for循环)

作业：
    1.编写程序把用户给定的某个字符的
		    所有二进制数位打印在屏幕上
				（要求使用位操作符实现）
    2.使用三目表达式完成一个字符的
		    大小写转换(字符从键盘得到，
				假设字符一定是英文字符)





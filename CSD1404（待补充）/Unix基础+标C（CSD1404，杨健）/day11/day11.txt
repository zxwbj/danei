全局变量，局部变量和块变量是可以重名的
如果一条语句中使用了重名变量则实际使用
    的变量是作用域包含它的变量中作用域
		最小的那个变量

进程中的数据在内存中是分段保存的
代码段       存放语句转化得到来二进制数位
             这个段落中的数据在运行的
						 时候不可以修改
全局段       全局变量的存储区位于这个
             段落
						 这个段落的大小不会随着
						 进程的运行而变化
栈           局部变量，块变量，形式
             参数和返回值的存储区都
						 位于这个段落
             这个段落的大小随着进程
						 的运行而不断变化,变化
						 规律遵循后进先出的原则
						 每个函数运行过程在栈中
						 有自己的私有区域，每当
						 函数运行结束后它的私有
						 区域会被计算机回收
堆           包含动态分配的存储区
             在使用完这些存储区后
						 必须使用语句把他们还给
						 操作系统。
             
声明变量时可以使用的关键字
1.auto关键字用来声明自动变量
     普通局部变量就是自动变量
2.static关键字用来声明静态变量
     静态变量的生命周期是整个
		 进程的运行过程
     静态全局变量的作用域是声明
		 它的文件中所有语句的总和
		 没有初始化的静态变量自动
		 被初始化成0
		 静态变量只在进程开始的时候
		 初始化一次
3.const关键字可以用来声明不可以
     赋值的变量
		 这种变量只能在初始化的时候
		 赋值
4.volatile关键字用来声明多变的变量

指针变量是一种变量，它的存储区中
    只能存储地址数据
指针变量的用途是找到另外一个变量
指针变量和普通变量的关系类似种子
    文件和电影文件的关系
指针变量只能找到另外一个变量
不同时候指针变量可以找到不同的其他
    变量
只有把指针变量和普通变量捆绑后
    才可以通过指针变量找到捆绑的
		普通变量（把普通存储区的地址
		记录在指针变量的存储区中就
		实现了他们之间的捆绑）
指针变量之间存在类型的区别，指针
    变量的类型决定了捆绑变量
		的类型
不同类型的指针变量大小相同，在我们
    的计算机上都是4个字节

指针变量名称可以在程序中代表四个
    不同的东西
1.不加*可以代表指针本身的存储区
    以及这个存储区中的地址数据
2.加*后可以代表捆绑存储区以及
    这个存储区中的数值

没有捆绑过的指针内部必须记录地址
    NULL，这个地址的数值是数字0。
		这个地址叫空地址，记录这个地址
		的指针叫空指针。
即没有捆绑存储区也没有记录NULL的
    指针叫野指针。
避免程序中出现野指针
没有初始化的指针变量就是野指针,所有
    指针变量都要初始化
初始化的时候*不参与计算(初始化的是
		指针本身的存储区)

指针在程序运行过程中会和不同的存储区
    捆绑
通过指针使用捆绑存储区时只需要关心
    捆绑存储区的某些特征,不需要知道
		捆绑存储区的来源

任意指针之间赋值后地址数据不变
多个不同类型的指针可以和同一个存储区
    捆绑
可以把一个指针强制类型转换成任意类型的
    指针去使用

void*是一种指针类型，这种指针没有规定
    捆绑存储区的类型(它可以和任何存储区
		捆绑)
这种指针必须首先强制类型转换成另外一种
    指针然后才能取得捆绑存储区
这种指针通常用来记录来源不明（或类型
    不明）的存储区的地址

数组做函数形式参数时真正的形式参数
    就是一个指针存储区
这个指针存储区和数组中第一个存储区
    进行了捆绑,因此它可以作为数组
		使用
指针类型形式参数可以让被调用函数
    使用外部提供的存储区
当编写函数时不知道指针形式参数会和
    什么类型的存储区捆绑时需要把指针
		形参声明成void*类型

指针类型也可以作为函数的返回值存储区
    使用
指针类型的返回值存储区可以传递多个
    数据
绝不可以把指针类型返回值存储区和局部
    变量捆绑

预习：
    1.指针
		2.字符串

作业：
    1.编写函数把一个数组中所有存储区
		    的内容追加到另外一个数组的
				末尾。（使用指针完成，函数
				的返回值应该能代表合并后的
				数组）






不要把结构体变量作为函数的形参和返回值
    存储区使用（这样会浪费时间和空间）
使用结构体指针作为函数的形式参数和返回值
    可以避免结构体内容复制过程中时间和
		空间的浪费。（结构体指针类型的形式
		参数如果能加const关键字一定要加，
		结构体指针类型的返回值绝不可以和被
		调用函数提供的局部存储区捆绑）

在内存中分配存储区的时候必须遵守数据
    对齐的规则（存储区的地址必须是它
		自身大小的整数倍,double类型存储区
		的地址只需要是4的倍数就可以了）

数据对齐造成结构体内部各子存储区之间
    有空隙（不一定根据结构体中某个存储区
		的地址计算出其他存储区的地址）

结构体变量的大小是其中最大单个基本类型
    存储区大小的整数倍(double类型的
		大小按4个字节计算)

为了把结构体的大小补充成合适的大小需要
    在最后补充一些浪费的字节，这叫做
		数据补齐。

声明结构体的时候把占地小的存储区放在
    前边可以尽量节省空间

枚举也可以用来扩展新的数据类型
声明枚举类型时使用enum关键字
枚举类型中包含有限个数字，每个数字
    用一个名字表示
第一个名字代表的数字是0，向后依次递增
可以使用枚举类型在程序中用名字表示一组
    相关的概念

联合也可以用来扩展新的数据类型
声明联合的时候需要使用union关键字
联合的声明方法和结构体一样，除了
    使用union关键字
联合中所有子变量的开始地址都一样，
    所以联合中所有子变量的存储区
		是重叠的。
联合的大小是其中最大子变量的大小

动态分配的存储区是由程序员在程序中
    使用专门的语句进行分配和释放的。
这种存储区的生命周期完全由程序员
    控制。
这种存储区全都位于叫做堆的段落中
必须在程序中把所有不再使用的动态
    分配存储区释放（还给操作系统）

必须使用C语言中提供的一组标准函数
    进行动态分配内存的分配和释放
为了使用这些标准函数需要包含stdlib.h
    头文件

malloc标准函数可以动态分配一组连续的
    字节
这个函数需要字节个数作为参数
这个函数把分配好的第一个字节的地址
    赋值给返回值存储区
如果失败则把NULL赋值给返回值存储区
返回值类型是void*指针，所以在使用之前
    必须要进行强制类型转换

free标准函数可以用来释放一组连续的
    动态分配存储区
这个函数需要第一个存储区的地址作为
    参数
一次分配的存储区必须一次都释放掉
这条语句结束后参数地址不再可用，记录
    参数地址的指针变成野指针，应该
		把他们清理成空指针
在程序结束之前必须使用这条语句把所有
    动态分配的存储区都释放掉
同样的存储区只能释放一次

通过使用动态分配的存储区可以让调用
    函数使用被调用函数分配的存储区

动态分配存储区的地址可以赋值给指针
    类型的返回值存储区(被调用函数
		中没有释放动态分配的存储区)
这种时候动态分配的存储区应该由其他
    函数释放

预习：
    1.动态分配存储区
		2.函数指针
		3.常用的基本函数

作业：
    1.改写人员信息管理系统，使用结构体
		记录一个人的所有信息。使用动态分配
		的结构体。程序应该可以把多个人员
		信息记录在文件中。
	  2.编写字符串拷贝函数，这个函数通过
		参数得到一个原始字符串，函数的返回值
		表示复制后的新字符串





模板和STL
一、函数模板
1.定义函数模板
1)函数模板代表一个函数家族。它的表示（外形）看起来和普通函数很相似，唯一区别就是有些函数元素是未确定的，这些元素将在使用时被参数化――参数化类型或者类型参数。
2)模板参数必须用如下形式的语法来声明：
template<typename 类型形参1, typename 类型形参2, ...>
3)类型形参的名称和其它合法标识符的命名规则一致。与类型形参相对应的类型实参可以是基本类型，如int、double，也可以是类类型，如string、Student。
4)声明类型形参使用了关键字typename，也可以使用class，在这种语境下两个关键字完全等价。但是这里不可以使用struct关键字。
2.使用函数模板
1)一般形式：函数模板名<类型实参1, 类型实参2, ...> (实参表);
2)通常而言，编译器并不会把模板直接编译成一个可以处理任何类型的单一实体，而是对于使用函数模板时所提供的每一种类型实参，产生一个不同的实体。这种用具体类型代替模板参数的过程叫做实例化。该过程的结果就是产生了一个模板实例。
3)试图基于一个不支持模板内部所使用操作的类型实例化一个模板，将会导致一个编译错误。
4)每个函数模板至少被编译两次。第一次是在实例化以前，只检查模板本身的语法是否正确，并不生成二进制代码。第二次是在实例化期间，结合所提供的类型实参，再次进行语法检查，若检查通过则产生二进制代码。这个过程被称为二次编译或后期编译。
5)一定要保证当编译器看到模板被使用时，一定能够同时看到该模板的定义。
3.函数模板参数的隐式推断
int a[10];
a[5] = 5; -> *(a+5) = 5;
cout << sizeof (a) << endl; // 40
void foo (int* x); -> sizeof (x) -> 4
foo (a); // 首地址
void bar (int(&x)[10]); -> sizeof (x) -> 40
foo (a); // 整个数组
4.函数模板和普通函数一样，其调用参数也可以带缺省值
template<typename T>
void foo (T x, int y = 1234) { ... }
5.函数模板的重载
主要用于在满足大多数类型的同时，为某些特殊类型提供一个单独的实现。
二、类模板
1.定义类模板
template<typename 类型形参1, typename 类型形参2, ...> class 类模板名 { ... };
在类模板内部，成员变量的类型，成员函数的参数、返回值及其内部局部变量的类型，基类的类型，甚至内部类的类型等，都可以被定义为类型参数。
template<
  typename A
  typename B
  typename C
  typename D
  typename E
  typename F>
class Dummy : public E {
public:
  B foo (C c) {
    D d;
    return B ();
  }
  typedef F G;
private:
  A m_a;
};
Dummy<int, char, float, double, Student, string>
class Dummy : public Student {
public:
  char foo (float c) {
    double d;
    return char ();
  }
  typedef string G;
private:
  int m_a;
};
为了定义类模板的成员函数，必须指定该成员函数是一个函数模板，而且还需要使用类模板的完整类型限定符。
template< typename 类型形参1, ...>
返回类型 类模板名<类型形参1, ...>::成员函数名 (形参表) {
  ...
}
2.类模板的使用
1)类模板名<类型实参1, ...> 对象名 (构造实参表);
类模板--实例化-->类--实例化-->对象
   编译器(编译期间)  处理器(运行期间)
2)类模板的模板参数不能隐式推断，必须显式指明。
3)类模板的模板参数可以带有缺省值，但是函数模板的模板参数不能带有缺省值。与函数参数的缺省值一样，类模板的缺省参数必须靠右，即如果某一个模板参数带有缺省值，那么它后面的所有模板参数必须都带有缺省值。
4)类模板中，只有那些被调用的成员函数才会被实例化（被编译成二进制代码）。某些类型虽然并没有提供类模板所需要的全部功能，但照样可以实例化该类模板，只要不直接或间接调用那些依赖于未提供功能的成员函数即可。
3.类模板的静态成员变量，在该类模板的每个实例化类中，都有一份独立的拷贝。
4.类模板的特（例）化
1)全类特化：针对需要特化的具体类型，将整个类模板重写为一个具体类。
2)成员特化：针对需要特化的具体类型，将类模板中与该类型有关的成员函数（包括普通成员函数、静态成员函数、构造函数、析构函数以及运算符函数等）单独拿出来特化。
3)全类特化相当于另外定义了一个类，特化版本的实现与基本版本可以完全不同，而成员特化只是针对部分成员函数给出了另一种形式的定义，其接口规格必须和基本版本保持严格一致，否则将被编译器视为非法特化。
5.类模板的局部特化
三、非类型参数
1.无论是函数模板还是类模板，除了可以带有类型参数以外，还可以带有值形式的参数，谓之非类型参数。
2.传递给模板的非类型实参可以是常量、常量表达式、带有常属性（const）的变量，但是不能带有挥发性（volatile）。
四、模板的技巧
1.嵌套依赖问题
在模板被实例化之前，模板参数T所表示的具体类型并不确定。编译器在编译模板代码时，会把依赖于模板参数T的嵌套类型理解为某个类的静态成员变量，进而导致后续编译失败。typename关键字旨在告诉编译器，所用标识符是个类型名（而非变量名），避免编译器因误解而报错。此处的typename关键字不能与class关键字互换。
         class - 定义类
                  \ 声明模板的
                  / 类型参数
typename - 解决嵌套依赖
2.通过模板函数的类型参数调用模板的模板函数问题
.template
->template
3.在子模板中引用基模板的符号
作用域限定符/this指针
4.在模板之外定义模板内的模板
5.模板的模板型模板参数
6.默认初始化
Student s;
int i = 0;
类型 对象 = 类型 ();
T t = T ();
Student t = Student ();
int t = int ();
7.单独编译和包含模型
class A {
public:
  void foo (void) { ... }
  void bar (void) { ... }
};
a.h
class A {
public:
  void foo (void);
  void bar (void);
};
foo.cpp
void A::foo (void) { ... }
bar.cpp
void A::bar (void) { ... }
优点：...
缺点：延长编译时间，实现代码必须公开。
8.显示实例化
通过实例化指示符：template 实例化实体
优点：实现代码不必公开。
缺点：类型受限，限制了模板的灵活性。
9.导出模型
通过export关键字，将一个模板声明为导出，即可在模板定义不可见的编译单元中，获得正确的实例化。
优点：实现代码不必公开，类型不受限制，编译速度快。
缺点：绝大多数C++编译器不支持。
只有Edison Design Group, Inc.的C++编译器支持。
在C++2011标准中已经删除了这个特性。export关键字已经被改做它用。
10.类模板是可以拥有虚函数，但是不能拥有虚模板函数。
当类模板被实例化时，其模板型成员函数尚未被实例化，因此虚函数表的长度无法确定。
思考：哪些函数不能是虚函数？
全局函数
静态成员函数
构造函数
模板型成员函数:
思考：如何用模板实现多态？
动态多态：基于虚函数
静态多态：基于模板
多态：通过一种途径可以得到多种不同的效果。
-------------------------------------------------------------
一、标准模板库(Standard Templates Library, STL)
C++编译器、标准库(基本库+模板库)
基本库：io流、标准异常、标准函数
模板库：容器(用数据结构存储数据)、迭代器(通过仿指针访问容器中的数据)、泛型算法(处理容器中的数据)
二、实现一个简化的双向线性链表容器及其迭代器和泛型算法
三、十大容器
1.线性容器：向量(vector)、双端队列(deque)、列表(list)
2.适配器容器：堆栈(stack)、队列(queue)、
优先队列(priority_queue)
3.关联容器：映射(map)、多重映射(multimap)、
集合(set)、多重集合(multiset)
四、向量(vector)
1.基本特性
1)连续内存，下标访问――O(1)
2)动态内存管理
int a[10];
a[10] = 10; // 危险！
向量的内存空间会随着新元素的加入自动增长。
向量也可以预分配空间，避免频繁动态分配内存的开销。
3)随机插入和删除――O(N)，元素越多，插入删除位置要前，性能越差。
2.实例化
#include <vector>
using namespace std;
1)创建空向量
vector<元素类型> 向量对象;
vector<int> vi;
2)创建有初始大小的向量
vector<元素类型> 向量对象 (初始大小);
vector<int> vi (5);
基本类型：用0初始化
类类型：用缺省构造函数初始化
3)创建有初始大小并指定初值的向量
vector<元素类型> 向量对象 (初始大小, 初值);
vector<int> vi (5, 88);
vector<Student> vt (5, Student ("张飞", 25));
4)创建有初始大小并每个元素的初值不同的向量
vector<元素类型> 向量对象 (起始迭代器, 终止迭代器);
int a[] = {12, 13, 14, 15, 16};
vector<int> vi (a, a+5);
3.大小和容量
1)不能通过sizeof ()获取向量的大小(元素个数)。只能通过size()成员函数获取其大小。
2)影响向量大小的函数
push_back/pop_back/insert/erase/clear/resize
3)容量是向量最多能容纳元素的个数，和大小不一定一致。
大小<=容量
4)向量的容量只能增加，不能减少，因此尽可能避免用向量存放大对象。// 不好
Student {
public:
  ...
private:
  char m_name[256];
  char m_info[1024];
  char m_addr[2048];
};
// 好而麻烦
Student {
public:
  Student (...) {
    m_name = new char[256];
    m_info = new char[1024];
    m_addr = new char[2048];
  }
  ~Student (void) {
    delete[] m_name;
    delete[] m_info;
    delete[] m_addr;
  }
private:
  char* m_name;
  char* m_info;
  char* m_addr;
};
// 好而省事，但是慢一点
Student {
public:
  ...
private:
  string m_name;
  string m_info;
  string m_addr;
};
4.随机迭代
类似向量这样的连续内存的容器，它们的迭代都具有随机迭代的特性：
1)可以和整数做加减法运算
2)可以在迭代器之间比大小
3)可以和迭代器做减法运算
而非连续内存的容器仅支持顺序迭代器，不具有以上运算特性。
5.反向迭代器reverse_iterator/const_reverse_iterator
rbegin()获得起始反向迭代器，指向最后一个元素。
rend()获取终止反向迭代器，指向第一个元素的前一个位置。
++/+/+=向前移动。
--/-/-=向后移动。
6.包括向量在内的所有STL容器都支持深拷贝。
7.查找和排序
#include <algorithm>
iterator find (iterator begin, iterator end,
  const value_type& val);
在由[begin, end)所划定的区域内查找第一个与val匹配的元素，返回其迭代器。若查找失败，则返回end。
线性查找，O(N)级时间复杂度。
void sort (iterator begin, iterator end);
在由[begin, end)所划定的区域内做快速排序，用小于运算符比较元素的大小。
void sort (iterator begin, iterator end, less cmp);
在由[begin, end)所划定的区域内做快速排序，用小于比较器cmp比较元素的大小。
快速排序，O(NlogN)级时间复杂度。
8.类对象的向量
1)缺省构造函数、支持深拷贝的拷贝构造函数和拷贝赋值运算符函数。
2)判等运算符“==”函数和小于运算符“<”函数。
五、双端队列(deque)
1.双端队列收尾两端都是开放的，因此在靠近首尾两端进行插入/删除操作，其效率是对称的。
2.双端队列为了维护存储结构两端的开放性，需要一些额外的空间是时间开销。
3.成员函数比向量多了push_front()和pop_front()，少了capacity()和reserve()。
六、列表(list)
1.双向线性链式表。
2.在任意位置做插入/删除都具有一样的效率――O(1)。
3.不支持下标运算符，也不支持随机迭代。
4.常用成员函数
front/push_front/pop_front
back/push_back/pop_back
insert/erase
size/resize/clear/empty
begin/end/rbegin/rend
1)删除所有匹配元素
void remove (value_type const& val);
2)将连续出现的重复元素唯一化
void unique (void);
10 20 20 20 30 20 20 40 20 50  -unique->
10 20           30 20      40 20 50
3)将一个列表的部分或全部剪切到另一个列表中
void splice (iterator pos, list& lst);
将参数列表lst的全部元素剪切到调用列表的pos之前。
void splice (iterator pos, list& lst, iterator del);
将参数列表lst中del处的元素剪切到调用列表的pos之前。
void splice (iterator pos, list& lst, iterator begin,
  iterator end);
将参数列表[begin, end)区间内的元素剪切到调用列表的pos之前。
4)有序合并
void merge (list& lst);
将有序的参数列表剪切到有序调用列表中，并保证调用列表依然有序。通过小于号比大小。
void merge (list& lst, less cmp);
通过比较器比大小。
5)排序
sort (void);
sort (less cmp);
一种泛型算法能够适用于某种容器，关键看该容器所提供的迭代器是否能够满足此算法的要求。
七、堆栈(stack)
1.后进先出
2.底层容器：vector/deque/list
top    ->   back
push  ->   push_back
pop    ->   pop_back
size     ->   size
empty ->   empty
3.实例化
#include <stack>
stack<元素类型, 底层容器类型 = deque>
八、队列
1.先进先出
2.底层容器：deque/list
back  ->  back
front  ->  front
push   ->  push_back
pop     ->  pop_front
size      ->  size
empty  ->  empty
3.实例化
#include <queue>
queue<元素类型, 底层容器类型 = deque>
九、优先队列
1.优者先出
2.底层容器：vector/deque
3.实例化
#include <queue>
priority_queue<元素类型, 底层容器类型 = deque>
默认优先级：大者为优
priority_queue<元素类型, 底层容器类型, 优先器>
根据优先器确定大小规则。
十、映射
1.存放键值对(key-value)的集合，key唯一。
2.采用平衡有序二叉树的结构存放，以key为基准。
3.key的大小：key类型的小于号运算符、比较器
4.搜索性能好：O(logN)
5.以pair<F,S>为访问单元，只有两个成员变量，first和second，分别为F和S类型，对应键值对的key和value。
6.支持下标运算符：以key为参数，如果所给定的key不存在，增加一个元素保存所给定的key，同时返回value的引用；如果所给定的key已存在，直接返回其value的引用。
7.成员函数
insert - 插入元素
pair<iterator, bool> insert (...);
erase - 删除元素
find - 查找元素
十一、多重映射
1.允许key重复的map。
2.不支持下标运算符“[]”。
十二、集合
1.没有value的map。
2.不需要pair作为存储单元。
十三、多重集合
1.允许key重复的set。
2.没有value的multimap。
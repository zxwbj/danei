//创建实心画刷（给封闭图形填充单一颜色）
HBRUSH CreateSolidBrush(
  COLORREF crColor   // 画刷颜色
);
//创建阴影画刷
HBRUSH CreateHatchBrush(
  int fnStyle,      // 阴影线的样式
  COLORREF clrref   // 阴影线的颜色
);
//创建位图画刷
HBRUSH CreatePatternBrush(
  HBITMAP hbmp   // 位图句柄
);



COLORREF nColor = 1456456;
func( int x, int y, COLORREF nColor )
{
   return x+y+nColor;
}





int SetMapMode(
   HDC hdc, //DC句柄
   int fnMapMode //映射模式
 ); 返回旧的映射模式

fnMapMode:
    MM_TEXT - 默认模式  1个逻辑单位=1个像素 
                       X轴右为正， Y轴下为正
    MM_HIENGLISH - 1个逻辑单位=0.001英寸
    MM_LOENGLISH - 1个逻辑单位=0.01英寸
    MM_HIMETRIC - 1个逻辑单位=0.01毫米
    MM_LOMETRIC - 1个逻辑单位=0.1毫米
    MM_TWIPS - 1个逻辑单位=1/1440英寸（打印机常用）
            以上五个模式 X轴右为正，Y轴上为正

     自定义模式
    MM_ISOTROPIC - 1个逻辑单位 = 自定义
    MM_ANISOTROPIC - 
                x轴一个逻辑单位 = 自定义1
                y轴一个逻辑单位 = 自定义2

     X和Y轴的正方向也可以自定义

BOOL SetWindowExtEx(
  HDC hdc,       // DC句柄
  int nXExtent,  // 逻辑的x比例  1000
  int nYExtent,  // 逻辑的y比例   1000
  LPSIZE lpSize  // 返回原来比例，一般为NULL
);

BOOL SetViewportExtEx(
  HDC hdc,       // DC句柄
  int nXExtent,  // 设备的x比例  2000
  int nYExtent,  // 设备的y比例  3000
  LPSIZE lpSize  // 返回原来的比例，一般为NULL
);

//普通窗口 - 自定义 调用 缺省
WndProc(....)
{
   ....
   return DefWindowProc(....)
}

//对话框窗口 - 缺省 调用 自定义
缺省(...)
{
   自定义函数（...）
}


DefWindowProc( hWnd, msg, wParam, lParam )
{
  switch( msg )
  {
    case ....:
      //做了一个菜单，并将菜单显示
      //重绘被菜单挡住的区域
      break;
   ......
  }
}


























一.函数参数的哑元
   如果一个函数的参数 只有类型 没有名字 
   void  foo(void){ 
   
   }
   c中 让参数列表 严格匹配

   保持函数的向前兼容性 
   void  foo(int){ 
       
   }

   void  encode(int key){
   
   }
   void  decode(int key){ 
       
   }
  

   void  encode(int key){
   
   }
   void  decode(int){ 
       /* 符合之前调用习惯 */  
   }
  

   区分函数(区分函数)
   Date  date;   
   !date;
   ~date;
   ++date;
   date++;
   operator++(){
        /* 这就是前++  默认 */
   }
   operator++(int){
        /* 这就是后++ */
   }

二. 函数参数的默认值
   一个函数在定义 或者声明时 可以给参数指定默认
   值,那在调用这个函数时 如果不给这个参数传实
   参则使用默认的参数值,如果传入参数值 则使用
   传入的值替代掉默认的值。

   作用:减少函数的个数 方便调用 

   限制:
       参数的默认值 必须靠右
           一个参数由默认值 则参数右边所有参数
	   必须都有默认值.
       当函数的声明 和 实现分开时 参数的默认值
           需要声明中指定 实现不再指定
   设计一个函数 用来打印一个整数的内容
       默认打印整数的1一个元素值 默认以逗号
       作为分隔符号。声明和实现分开
   void   printArr(int *data,int size=1,
       char sep=',');
三.内联函数
   int getmax(int x,int y);
   inline int getmax(int x,int y);
   
   在编译时 请求编译器把函数的二进制直接复制
   调用位置 这样减少开函数栈 和 清理函数栈的
   开销 提高调用效率。

   大函数  稀少调用的函数 不适合内联
   小函数  频繁调用   适合内联
   递归函数 无法实现内联

   内联只是一种请求 请求成功就按照内联方式调用
   请求失败 就按照普通函数的方式去调用。

   int  x;
   register  int  y;


四.c++ 中的动态内存分配
   c中  malloc  realloc  calloc  free
   c++  中使用
   new    delete
      /* 分配堆内存 */ 
      类型 *指针名 = new 类型;
      类型 *指针名 = new 类型(值);
      /* 释放堆内存 */
      delete  指针名; 
        
      定义一个结构体 Date  字段是整数类型的
      年 月 日  要求使用new申请一个结构体大小
      的空间 给块空间赋值 2014 7 7  输出这块
      空间对应的值  最后 释放空间

   new[]  delete[] 
      申请多个元素空间 
      类型 *指针名   =  new 类型名[n];
      int  *parr = new int [10];

      delete[]  parr;  /* 析构函数 */

      申请5个整数 对应的堆内存 然后给这块
      空间赋值 9 5 2 7 0 
      最后输出 这块空间的内容 
      最后释放这块空间的内存 

   定位内存分配
      char  data[100];
      int   *pai=new (data)int[25];
  
      data 和 pai指向相同的空间 
      pai 不用考虑内存释放 

五.c++ 中的引用 
   5.1 概念
   引用就是一个变量的别名 
   9527   华安   唐伯虎  唐寅 
   机器猫   小叮当  哆啦a梦 
   5.2 语法
   int   a=99;
   int&  ra=a;
   引用类型 必须初始化 
   类型&   引用名=值;
   引用一旦初始化 则在这个变量的生命期内
   这个引用名 只能为这个变量服务。
   5.3 引用的应用 
   函数的参数 
       /* 引用传递 */ 
       void  myswap(int& x,int& y); 
       void  myswap(int x,int y);
       /* 写一个函数 完成两个整数变量的
          值交换 */
       可以在函数内部 访问到函数外部的数据
       减少复制 真正存储空间只有一份
   函数的返回值
       c中函数的返回值 一般作为右值。函数返回
       值是一个只读的空间。
   5.4 常引用 和 引用的底层实现
       const int&   ra=100;
       常引用 即可以引用常量 也可以引用变量
       int  a=100;
       const  int * pa=&a;
      // int  const * pa;
       int  b=200;
       pa=&b;

       char *abc="hello world";

       类型  *const  指针名;
   5.5 引用和指针的联系 和区别?
       
六. c++ 中的类型转换
   (类型)    强制类型转换

   static_cast<类型>(变量)
       在某一个方向上 可以做隐式类型转换
       int  *pi=new int(100);
       void *pv=pi;
   dynamic_cast<类型>(变量)
       用在具有多态性的父子类之间 
  
   const_cast<类型>(变量)
       专业去常的 转换

   reinterpret_cast<类型>(变量);
       最接近c强制类型转换
       把整数变成指针
       指针变成整数 
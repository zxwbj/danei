作业:  
写一个分数类  实现分数的输入 输出 
   实现 *  和 *= 
   实现 前  --   和 后--

一.只能是成员形式的运算符
   5.1 =  []
   Array  arra;   自定义数组 
   arra[0] 
   Array  arrb;
   arrb=arra;

   5.2 ()
   可以做函数对象  
       一个可以像函数一样去使用的对象 
   可以做类型转换   
       可以把当前类型 转换成一个类型 
   5.3 ->   * 
   把一个不是指针的类型 形式上可以当做指针类型
   来使用。

   智能指针 

二.  new  delete  运算符重载
   void* operator new(size_t size);
   void  operator delete(void* ptr);

三.面向对象的三大特征
   封装 
   继承 
   多态

四.封装
   public     private
   该公开的数据就  public
   需要隐藏掉细节的数据 就 private

   作用:
   便于分工 
       算法私有化
       对外公开访问的接口 
       encode(int key)
       decode(int key)
   能隐藏细节 防止 不必要的扩展
       
五.继承
   5.1 就是把一个类的数据  传承到下一个类中。
       目的是为了 代码复用,还能在复用的基础上
       扩展功能。
       父类 

       子类
   5.2 语法
       /* Parent 是父类  Child是子类 */
       class  Parent{
       
       };
       class  Child:public Parent{
       
       };
   5.3 举例
       class Animal{
           string  name;
	   int     age;
	   public:
	   void   show(){
	       cout << "animal show" << endl;
	   }
       };
       class Dog:public Animal{ 
       
       };
    5.4 使用组合方式 去复用代码
       从具体到抽象 可以这么描述(继承) 
       Cat  is  a   Animal 
       Dog  is  a   Animal 

       /* 组合关系  has  a */  
       Car  has a   Radio
    5.5 继承方式 
       公开继承  class A:public B{ };
       私有继承  class A:private B{ };
       保护继承  class A:protected B{ };
    5.6 公开继承
       在公开继承下 父类中的公开数据 到子类之后
       依然是公开的。
       父类中的保护数据 到子类之后 依然是保护的。
       父类的私有的数据 到子类之后 成为隐藏的。
    5.7 保护继承
       在保护继承下 父类的公开数据  到子类之后
       就变成保护的。
       父类的保护数据  到子类之后 是保护的。
       父类的私有的数据 到子类之后成为隐藏的。
    5.8 私有继承
       在私有继承继承下 父类的公开数据 和 
       保护数据 到子类之后变为私有的。
       父类中的私有数据 到子类之后成为隐藏的。

    

六. 引用和 指针联系 和区别
   联系:引用本质上使用指针实现  所以很多指针
   完成的功能 都可以使用引用完成。
   指针作为函数参数 函数内部可以修改函数外部
       的数据。引用可以完成。
   int*    int&
   int**   int*&
   
   指针作为返回值  是让函数的返回值 
      可以做左值。引用可以完成。
      
   区别:
       1.指针是实体变量 大小永远是4
         引用是一个别名 
       2.用指针的指针 
         int ** 
	 但没有引用的引用
	 int && 
       3.指针型的变量 语法上不是必须初始化
         但引用型的变量 必须初始化
       4.指针是可以改变指向的  引用一旦初始化
         就不能改变引用对象(引用生命期内)
	 show(int& x)
       5.没有引用的指针  但有 指针的引用
         void  changePtr(int **p){
	 
	 } 
	 void  changePtr(int*& p){
	 
	 } 
       6.有指针的数组  但没有引用的数组
         int* data[5];
	 但有数组的引用

         int  data[5];  
         int  (&rdata)[5];
        
	 showArr(int  (&rdata)[5]){
	 
	 } 
	 int  data[3];
         类型通用问题 模板部分会解决  
  






